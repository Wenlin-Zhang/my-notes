1. git log
git status
git log
git log --oneline
git log --stat
git log -p
you can supply the SHA of a commit as the final argument for all of these commands? For example:
git log -p fdf5493

2. git show
The git show command will show only one commit. The output of the git show command is exactly the same as the git log -p command.
So by default, git show displays:
    the commit
    the author
    the date
    the commit message
    the patch information
However, git show can be combined with most of the other flags we've looked at:
    --stat - to show the how many files were changed and the number of lines that were added/removed
    -p or --patch - this the default, but if --stat is used, the patch won't display, so pass -p to add it again
    -w - to ignore changes to whitespace

3. git add
The git add command is used to move files from the Working Directory to the Staging Index.
$ git add <file1> <file2> … <fileN>
This command:
    takes a space-separated list of file names
    alternatively, the period . can be used in place of a list of files to tell Git to add the current directory (and all nested files)

Notes:
(1) The act of moving a file from the Working Directory to the Staging Index is called "staging". If a file has been moved, then it has been "staged". Moving a file from the Staging Index back to the Working Directory will unstage the file. If you read documentation that says "stage the following files" that means you should use the git add command.
(2) Did you also notice the helpful text that's located just beneath "Changes to be committed"? It says (use "git rm --cached <file>..." to unstage) This is a hint of what you should do if you accidentally ran git add and gave it the wrong file.
As a side note, git rm --cached is not like the shell's rm command. git rm --cached will not destroy any of your work; it just removes it from the Staging Index.

4. git commit
(1) configure your favoriate editor:
$ git config --global core.editor <your-editor's-config-went-here>
(2) The git commit command takes files from the Staging Index and saves them in the repository.
$ git commit
This command will open the code editor that is specified in your configuration
        (check out the Git configuration step from the first lesson to configure your editor)
Inside the code editor:
    a commit message must be supplied
    lines that start with a # are comments and will not be recorded
    save the file after adding a commit message
    close the editor to make the commit
$ git commit -m "short commit message"
(3) What is good commit message? 
Do
    do keep the message short (less than 60-ish characters)
    do explain what the commit does (not how or why!)
Do not
    do not explain why the changes are made (more on this below)
    do not explain how the changes are made (that's what git log -p is for!)
    do not use the word "and"
        if you have to use "and", your commit message is probably doing too many changes - break the changes into separate commits
        e.g. "make the background color pink and increase the size of the sidebar"
Explain the Why
If you need to explain why a commit needs to be made, you can!
When you're writing the commit message, the first line is the message itself. After the message, leave a blank line, and then type out the body or explanation including details about why the commit is needed.

5. git diff
The git diff command is used to see changes that have been made but haven't been committed, this command displays:
    the files that have been modified
    the location of the lines that have been added/removed
    the actual changes that have been made

6. Git Ignore
If you want to keep a file in your project's directory structure but make sure it isn't accidentally committed to the project, you can use the specially named file, .gitignore (note the dot at the front, it's important!). Add this file to your project in the same directory that the hidden .git directory is located. All you have to do is list the names of files that you want Git to ignore (not track) and it will ignore them.
Using globing:
Globbing lets you use special characters to match patterns/characters. In the .gitignore file, you can use the following:
    blank lines can be used for spacing
    # - marks line as a comment
    * - matches 0 or more characters
    ? - matches 1 character
    [abc] - matches a, b, or c
    ** - matches nested directories - a/**/z matches
        a/z
        a/b/z
        a/b/c/z
So if all of the 50 images are JPEG images in the "samples" folder, we could add the following line to .gitignore to have Git ignore all 50 images:
samples/*.jpg

7. git tag
(1) $ git tag -a v1.0
This will open your code editor and wait for you supply a message for the tag. 
CAREFUL: In the command above (git tag -a v1.0) the -a flag is used. This flag tells Git to create an annotated flag. If you don't provide the flag (i.e. git tag v1.0) then it'll create what's called a lightweight tag.
    Annotated tags are recommended because they include a lot of extra information such as:
        the person who made the tag
        the date the tag was made
        a message for the tag
    Because of this, you should always use annotated tags.
(2) If you type out just git tag, it will display all tags that are in the repository.
(3) Git Log's --decorate Flag
git log is a pretty powerful tool for letting us check out a repository's commits. The --decorate flag will show us some details that are hidden from the default view. Remember that tags are associated with a specific commit. This is why the tag is on the same line as the commit's SHA. Did you notice that, in addition to the tag information being displayed in the log, the --decorate also revealed HEAD -> master? That's information about a branch!
(4) A Git tag can be deleted with the -d flag (for delete!) and the name of the tag:
$ git tag -d v1.0
(5) Running git tag -a v1.0 will tag the most recent commit. But what if you wanted to tag a commit that occurred farther back in the repo's history?
All you have to do is provide the SHA of the commit you want to tag!
$ git tag -a v1.0 a87984

8. branching
The git branch command is used to interact with Git's branches:
$ git branch
It can be used to:
    list all branch names in the repository
    create new branches
    delete branches
(1) create a branch: To create a branch, all you have to do is use git branch and provide it the name of the branch you want it to create: $ git branch sidebar
(2) switch to a branch: To switch between branches, we need to use Git's checkout command: $ git checkout sidebar
It's important to understand how this command works. Running this command will:
    remove all files and directories from the Working Directory that Git is tracking
        (files that Git tracks are stored in the repository, so nothing is lost)
    go into the repository and pull out all of the files and directories of the commit that the branch points to
(3) show the branch in log:
The branch information in the command prompt is helpful, but the clearest way to see it is by looking at the output of git log. But just like we had to use the --decorate flag to display Git tags, we need it to display branches.
$ git log --oneline --decorate
(4) The Active Branch
The command prompt will display the active branch. But this is a special customization we made to our prompt. If you find yourself on a different computer, the fastest way to determine the active branch is to look at the output of the git branch command. An asterisk will appear next to the name of the active branch.
(5) Delete A Branch
A branch is used to do development or make a fix to the project that won't affect the project (since the changes are made on a branch). Once you make the change on the branch, you can combine that branch into the master branch (this "combining of branches" is called "merging" and we'll look at shortly).
Now after a branch's changes have been merged, you probably won't need the branch anymore. If you want to delete the branch, you'd use the -d flag. The command below includes the -d flag which tells Git to delete the provided branch (in this case, the "sidebar" branch).
$ git branch -d sidebar
One thing to note is that you can't delete a branch that you're currently on. So to delete the sidebar branch, you'd have to switch to either the master branch or create and switch to a new branch.
Deleting something can be quite nerve-wracking. Don't worry, though. Git won't let you delete a branch if it has commits on it that aren't on any other branch (meaning the commits are unique to the branch that's about to be deleted). If you created the sidebar branch, added commits to it, and then tried to delete it with the git branch -d sidebar, Git wouldn't let you delete the branch because you can't delete a branch that you're currently on. If you switched to the master branch and tried to delete the sidebar branch, Git also wouldn't let you do that because those new commits on the sidebar branch would be lost! To force deletion, you need to use a capital D flag - git branch -D sidebar.

9. Branching effectively
(1) The way we currently work with branches is to create a branch with the git branch command and then switch to that newly created branch with the git checkout command.
But did you know that the git checkout command can actually create a new branch, too? If you provide the -b flag, you can create a branch and switch to it all in one command.
$ git checkout -b richards-branch-for-awesome-changes
It's a pretty useful command, and I use it often.
Let's use this new feature of the git checkout command to create our new footer branch and have this footer branch start at the same location as the master branch:
$ git checkout -b footer master

(2) the git log command is pretty powerful and can show us this information. We'll use the new --graph and --all flags:
$ git log --oneline --decorate --graph --all
The --graph flag adds the bullets and lines to the leftmost part of the output. This shows the actual branching that's happening. The --all flag is what displays all of the branches in the repository.
Running this command will show all branches and commits in the repository.

10. Merging
Pay attention to the two main types of merges in Git, a regular merge and a Fast-forward merge.
The git merge command is used to combine Git branches:
$ git merge <name-of-branch-to-merge-in>
When a merge happens, Git will:
    look at the branches that it's going to merge
    look back along the branch's history to find a single commit that both branches have in their commit history
    combine the lines of code that were changed on the separate branches together
    makes a commit to record the merge
(1) Fast-forward Merge
In our project, I've checked out the master branch and I want it to have the changes that are on the footer branch. If I wanted to verbalize this, I could say this is - "I want to merge in the footer branch". That "merge in" is important; when a merge is performed, the other branch's changes are brought into the branch that's currently checked out.
When we merge, we're merging some other branch into the current (checked-out) branch. We're not merging two branches into a new branch. We're not merging the current branch into the other branch.
Now, since footer is directly ahead of master, this merge is one of the easiest merges to do. Merging footer into master will cause a Fast-forward merge. A Fast-forward merge will just move the currently checked out branch forward until it points to the same commit that the other branch (in this case, footer) is pointing to.
To merge in the footer branch, run:
$ git merge footer
(2) Regular Merge
But you might say - "Of course that was easy, all of the commits are already there and the branch pointer just moved forward!"...and you'd be right. It's the simplest of merges.
So let's do the more common kind of merge where two divergent branches are combined. You'll be surprised that to merge in a divergent branch like sidebar is actually no different!
To merge in the sidebar branch, make sure you're on the master branch and run:
$ git merge sidebar
Because this combines two divergent branches, a commit is going to be made. And when a commit is made, a commit message needs to be supplied. Since this is a merge commit a default message is already supplied. You can change the message if you want, but it's common practice to use the default merge commit message. So when your code editor opens with the message, just close it again and accept that commit message.
(3) Recap
the git merge command is used to combine branches in Git:
$ git merge <other-branch>
There are two types of merges:
    Fast-forward merge – the branch being merged in must be ahead of the checked out branch. The checked out branch's pointer will just be moved forward to point to the same commit as the other branch.
    the regular type of merge
        two divergent branches are combined
        a merge commit is created
(4) Notes
It's very important to know which branch you're on when you're about to merge branches together. Remember that making a merge makes a commit.
As of right now, we do not know how to undo changes. We'll go over it in the next lesson, but if you make a merge on the wrong branch, use this command to undo the merge:
git reset --hard HEAD^
(Make sure to include the ^ character! It's a known as a "Relative Commit Reference" and indicates "the parent commit". We'll look at Relative Commit References in the next lesson.)


10. Merge conflicts
(1) Most of the time Git will be able to merge branches together without any problem. However, there are instances when a merge cannot be fully performed automatically. When a merge fails, it's called a merge conflict.
If a merge conflict does occur, Git will try to combine as much as it can, but then it will leave special markers (e.g. >>> and <<<) that tell you where you (yep, you the programmer!) needs to manually fix. 
(2) Merge Conflict Indicators Explanation
The editor has the following merge conflict indicators:
    <<<<<<< HEAD everything below this line (until the next indicator) shows you what's on the current branch
    ||||||| merged common ancestors everything below this line (until the next indicator) shows you what the original lines were
    ======= is the end of the original lines, everything that follows (until the next indicator) is what's on the branch that's being merged in
    >>>>>>> heading-update is the ending indicator of what's on the branch that's being merged in (in this case, the heading-update branch)
(3) Recap
A merge conflict happens when the same line or lines have been changed on different branches that are being merged. Git will pause mid-merge telling you that there is a conflict and will tell you in what file or files the conflict occurred. To resolve the conflict in a file:
    locate and remove all lines with merge conflict indicators
    determine what to keep
    save the file(s)
    stage the file(s)
    make a commit
Be careful that a file might have merge conflicts in multiple parts of the file, so make sure you check the entire file for merge conflict indicators - a quick search for <<< should help you locate all of them.

11. git commit --amend
(1) 更改最后一个 commit
借助 --amend 选项，你可以更改最近的 commit。
$ git commit --amend
如果你的工作目录没有内容（也就是仓库中没有任何未 commit 的更改），那么运行 git commit --amend 将使你能够重新提供 commit 消息。代码编辑器将打开，并显示原始 commit 消息。只需纠正拼错的单词或重新表述即可！然后保存文件并关闭编辑器，以便采用新的 commit 消息。
(2) 向 commit 中添加忘记的文件
此外，git commit --amend 使你能够包含忘记包含的文件（或文件更改）。你可以修改最后一个 commit（更新所有其他链接颜色的 commit）以包含这个忘记的修改。要包含忘记的链接，只需：
    编辑文件
    保存文件
    暂存文件(用 git add 暂存所有被修改的文件)
    运行 git commit --amend

12. git revert
该命令用于还原之前创建的 commit：
$ git revert <SHA-of-commit-to-revert>
此命令：
    将撤消目标 commit 所做出的更改
    创建一个新的 commit 来记录这一更改

13. git reset
(1) 初看，重置（reset） 似乎和 还原（revert） 相似，但它们实际上差别很大。还原会创建一个新的 commit，并还原或撤消之前的 commit。但是重置会清除 commit！
(2) 一定要谨慎使用 git 的重置功能。这是少数几个可以从仓库中清除 commit 的命令。如果某个 commit 不再存在于仓库中，它所包含的内容也会消失。
    为了减轻你的压力，澄清下，git 会在完全清除任何内容之前，持续跟踪大约 30 天。要调用这些内容，你需要使用 git reflog 命令。
(3) 相关 commit 引用
你已经知道可以使用 SHA、标签、分支和特殊的 HEAD 指针引用 commit。有时候这些并不足够，你可能需要引用相对于另一个 commit 的 commit。例如，有时候你需要告诉 git 调用当前 commit 的前一个 commit，或者是前两个 commit。我们可以使用特殊的“祖先引用”字符来告诉 git 这些相对引用。这些字符为：
    ^ – 表示父 commit
    ~ – 表示第一个父 commit
我们可以通过以下方式引用之前的 commit：
    父 commit – 以下内容表示当前 commit 的父 commit
    HEAD^
    HEAD~
    HEAD~1
    祖父 commit – 以下内容表示当前 commit 的祖父 commit
    HEAD^^
    HEAD~2
    曾祖父 commit – 以下内容表示当前 commit 的曾祖父 commit
    HEAD^^^
    HEAD~3
^ 和 ~ 的区别主要体现在通过合并而创建的 commit 中。合并 commit 具有两个父级。对于合并 commit，^ 引用用来表示第一个父 commit，而 ^2 表示第二个父 commit。第一个父 commit 是当你运行 git merge 时所处的分支，而第二个父 commit 是被合并的分支。
(3) 💡 备份分支 💡
    注意，使用 git reset 命令将清除当前分支上的 commit。因此，如果你想跟着操作接下来出现的所有重置操作，需要在当前 commit 上创建一个分支，以便用作备份。
    在进行任何重置操作之前，我通常会在最近的 commit 上创建一个 backup 分支，因此如果出现错误，我可以返回这些 commit：
    $ git branch backup
    如果你在重置任何内容前创建了 backup 分支，那么你可以轻松地让 master 分支指向 backup 分支所指向的同一 commit。你只需：
        从工作目录中删除未 commit 的更改
        将 backup 合并到 master（这将导致快进合并并使 master 向上移到和 backup 一样的点）
            $ git checkout -- index.html
            $ git merge backup
(4) --mixed 选项 (默认选项)
* 9ec05ca (HEAD -> master) Revert "Set page heading to "Quests & Crusades""
* db7e87a Set page heading to "Quests & Crusades"
* 796ddb0 Merge branch 'heading-update'
使用上述示例仓库，其中 HEAD 指向 9ec05ca 上的 master，运行 git reset --mixed HEAD^ 会把 commit 9ec05ca 中做出的更改移至工作目录中。
(5) --soft 选项
* 9ec05ca (HEAD -> master) Revert "Set page heading to "Quests & Crusades""
* db7e87a Set page heading to "Quests & Crusades"
* 796ddb0 Merge branch 'heading-update'
运行 git reset --soft HEAD^ 会把 commit 9ec05ca 中做出的更改直接移至暂存区。
(6) --hard 选项（当然并非最不重要选项）：
* 9ec05ca (HEAD -> master) Revert "Set page heading to "Quests & Crusades""
* db7e87a Set page heading to "Quests & Crusades"
* 796ddb0 Merge branch 'heading-update'
运行 git reset --hard HEAD^ 将清除 commit 9ec05ca 中做出的更改。
(7) git reset 命令被用来清除 commit：
$ git reset <reference-to-commit>
它可以用来：
    将 HEAD 和当前分支指针移到引用的 commit
    使用 --hard 选项清除 commit
    使用 --soft 选项将 commit 的更改移至暂存区
    使用 --mixed 选项取消暂存已被 commit 的更改

14. 全课程总结：
    使用 git init 和 git clone 创建仓库
    使用 git status 查看仓库
    使用 git log 和 git show 查看以往的 commit
    能够使用 git add 加入要提交的对象
    使用 git commit 提交至仓库
    你需要了解分支，合并分支，以及解决合并冲突
    能够在 Git 中撤销操作:
        git commit --amend 用于撤消最近的 commit ，或更改 commit 消息的措辞
        以及 git reset 如果你了解所有这些内容，那么你将很适合加入这门课程。

